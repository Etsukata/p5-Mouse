use strict;
# This is automatically generated by author/import-moose-test.pl.
# DO NOT EDIT THIS FILE. ANY CHANGES WILL BE LOST!!!
use t::lib::MooseCompat;
use warnings;

use Test::More;
$TODO = q{Mouse is not yet completed};
use Test::Exception;

use Mouse ();
use Mouse::Meta::Role;
use Mouse::Util;

my $role1 = Mouse::Meta::Role->initialize('Foo');
$role1->add_attribute( foo => ( is => 'ro' ) );

ok( $role1->has_attribute('foo'), 'Foo role has a foo attribute' );

my $foo_attr = $role1->get_attribute('foo');
is(
    $foo_attr->associated_role->name, 'Foo',
    'associated_role for foo attr is Foo role'
);

isa_ok(
    $foo_attr->attribute_for_class('Mouse::Meta::Attribute'),
    'Mouse::Meta::Attribute',
    'attribute returned by ->attribute_for_class'
);

my $role2 = Mouse::Meta::Role->initialize('Bar');
$role1->apply($role2);

ok( $role2->has_attribute('foo'), 'Bar role has a foo attribute' );

is(
    $foo_attr->associated_role->name, 'Foo',
    'associated_role for foo attr is still Foo role'
);

isa_ok(
    $foo_attr->attribute_for_class('Mouse::Meta::Attribute'),
    'Mouse::Meta::Attribute',
    'attribute returned by ->attribute_for_class'
);

my $role3 = Mouse::Meta::Role->initialize('Baz');
my $combined = Mouse::Meta::Role->combine( [ $role1->name ], [ $role3->name ] );

ok( $combined->has_attribute('foo'), 'combined role has a foo attribute' );

is(
    $foo_attr->associated_role->name, 'Foo',
    'associated_role for foo attr is still Foo role'
);

done_testing;
